name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          # Get the changelog section for this version
          awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
          
          # If no specific version found, use unreleased section
          if [ ! -s release_notes.md ]; then
            awk "/^## \[Unreleased\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
          fi
        else
          echo "## Release $VERSION" > release_notes.md
          echo "Automated release for version $VERSION" >> release_notes.md
        fi

    - name: Build documentation
      run: |
        # Create release artifacts
        mkdir -p release_artifacts
        
        # Package source code
        tar -czf release_artifacts/xai-medical-images-${{ steps.changelog.outputs.version }}-source.tar.gz \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='logs' \
          --exclude='models/checkpoints' \
          --exclude='data' \
          --exclude='static/uploads' \
          .

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=term-missing

    - name: Build Docker image for release
      run: |
        docker build -t xai-medical-images:${{ steps.changelog.outputs.version }} .
        docker save xai-medical-images:${{ steps.changelog.outputs.version }} | gzip > release_artifacts/xai-medical-images-${{ steps.changelog.outputs.version }}-docker.tar.gz

    - name: Generate checksums
      run: |
        cd release_artifacts
        sha256sum * > checksums.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.changelog.outputs.version }}
        name: Release ${{ steps.changelog.outputs.version }}
        body_path: release_notes.md
        files: |
          release_artifacts/*
        draft: false
        prerelease: ${{ contains(steps.changelog.outputs.version, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docker:
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      if: secrets.DOCKERHUB_USERNAME

    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract major and minor versions
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f1-2)
        echo "major=$MAJOR" >> $GITHUB_OUTPUT
        echo "minor=$MINOR" >> $GITHUB_OUTPUT

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.minor }}
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.major }}
          ghcr.io/${{ github.repository }}:latest
          ${{ secrets.DOCKERHUB_USERNAME && format('{0}/xai-medical-images:{1}', secrets.DOCKERHUB_USERNAME, steps.version.outputs.version) || '' }}
          ${{ secrets.DOCKERHUB_USERNAME && format('{0}/xai-medical-images:latest', secrets.DOCKERHUB_USERNAME) || '' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-documentation:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.repository == 'your-username/XAI-Medical-Images'  # Replace with your repo

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Build documentation
      run: |
        # Build API documentation
        if [ -d docs ]; then
          echo "Building documentation..."
          # Add documentation build commands here
        fi

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        cname: your-domain.com  # Optional: replace with your domain
      if: hashFiles('docs/**') != ''

  notify-release:
    runs-on: ubuntu-latest
    needs: [create-release, publish-docker]
    if: always()

    steps:
    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.create-release.result == 'success' && needs.publish-docker.result == 'success' && 'success' || 'failure' }}
        text: |
          üöÄ New release published!
          Version: ${{ steps.version.outputs.version }}
          Status: ${{ needs.create-release.result == 'success' && needs.publish-docker.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
          
          Docker images:
          - ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          - ghcr.io/${{ github.repository }}:latest
          
          Release notes: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL

    - name: Create deployment issue
      uses: actions/github-script@v6
      with:
        script: |
          const version = '${{ steps.version.outputs.version }}';
          const issueBody = `
          ## üöÄ Deployment Checklist for ${version}
          
          ### Pre-deployment
          - [ ] Review release notes
          - [ ] Verify Docker images are built and pushed
          - [ ] Check security scan results
          
          ### Staging Deployment
          - [ ] Deploy to staging environment
          - [ ] Run smoke tests
          - [ ] Verify Grad-CAM functionality
          - [ ] Check performance metrics
          
          ### Production Deployment
          - [ ] Deploy to production
          - [ ] Run production smoke tests
          - [ ] Monitor application health
          - [ ] Update monitoring dashboards
          
          ### Post-deployment
          - [ ] Announce release to team
          - [ ] Update documentation if needed
          - [ ] Monitor for issues in first 24 hours
          
          ---
          Release: https://github.com/${{ github.repository }}/releases/tag/${version}
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üöÄ Deploy ${version} to production`,
            body: issueBody,
            labels: ['deployment', 'release']
          });
      if: github.repository == 'your-username/XAI-Medical-Images'  # Replace with your repo